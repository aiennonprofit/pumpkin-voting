rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if user is admin
    function isAdmin() {
      return isAuthenticated() &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // Helper function to check if user owns the resource
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Users collection
    match /users/{userId} {
      // Users can read their own document
      allow read: if isOwner(userId);

      // Users can create their own document during registration
      allow create: if isOwner(userId) &&
                       request.resource.data.keys().hasAll(['displayName', 'email', 'createdAt']) &&
                       request.resource.data.displayName is string &&
                       request.resource.data.email is string &&
                       // isAdmin field must be a boolean (system will set this based on admin emails)
                       request.resource.data.isAdmin is bool;

      // Users can update their own document (displayName, votedFor)
      allow update: if isOwner(userId) &&
                       // Cannot change isAdmin flag
                       (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['isAdmin', 'email', 'createdAt'])) &&
                       // Can only update displayName and votedFor
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['displayName', 'votedFor']);

      // Admins can read all users
      allow read: if isAdmin();

      // Admins can update any user (to set isAdmin flag)
      allow update: if isAdmin();
    }

    // Pumpkins collection
    match /pumpkins/{pumpkinId} {
      // Anyone can read approved pumpkins
      allow read: if resource.data.status == 'approved';

      // Admins can read all pumpkins
      allow read: if isAdmin();

      // Authenticated users can create pumpkins
      allow create: if isAuthenticated() &&
                       request.resource.data.keys().hasAll(['title', 'description', 'carverName', 'image', 'submittedBy', 'submittedAt', 'status', 'voteCount']) &&
                       request.resource.data.submittedBy == request.auth.uid &&
                       request.resource.data.status == 'pending' &&
                       request.resource.data.voteCount == 0 &&
                       request.resource.data.approvedAt == null &&
                       request.resource.data.approvedBy == null &&
                       request.resource.data.title is string &&
                       request.resource.data.description is string &&
                       request.resource.data.carverName is string &&
                       request.resource.data.image is string;

      // Only admins can update pumpkins (approve, reject, or modify)
      allow update: if isAdmin();

      // Only admins can delete pumpkins
      allow delete: if isAdmin();

      // Allow pumpkin voteCount to be updated by authenticated users (for voting transactions)
      allow update: if isAuthenticated() &&
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['voteCount']) &&
                       request.resource.data.voteCount == resource.data.voteCount + 1 ||
                       request.resource.data.voteCount == resource.data.voteCount - 1;
    }

    // Config collection (for admin emails and other settings)
    match /config/{configId} {
      // Only authenticated users can read config during registration
      // This prevents enumeration of admin emails by anonymous users
      allow read: if isAuthenticated();

      // Allow initial creation of adminEmails document if it doesn't exist (even unauthenticated)
      // This allows the setup script to run. After creation, only admins can modify.
      allow create: if configId == 'adminEmails' &&
                       !exists(/databases/$(database)/documents/config/adminEmails) &&
                       request.resource.data.keys().hasAll(['emails']) &&
                       request.resource.data.emails is list;

      // Only admins can update or delete config
      allow update, delete: if isAdmin();
    }

    // Votes collection
    match /votes/{voteId} {
      // Users can read their own votes
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;

      // Admins can read all votes
      allow read: if isAdmin();

      // Users can create votes
      allow create: if isAuthenticated() &&
                       request.resource.data.userId == request.auth.uid &&
                       request.resource.data.keys().hasAll(['userId', 'pumpkinId', 'votedAt']) &&
                       request.resource.data.userId is string &&
                       request.resource.data.pumpkinId is string &&
                       // Check that pumpkin exists and is approved
                       exists(/databases/$(database)/documents/pumpkins/$(request.resource.data.pumpkinId)) &&
                       get(/databases/$(database)/documents/pumpkins/$(request.resource.data.pumpkinId)).data.status == 'approved';

      // Users can delete their own votes
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;

      // Admins can delete any vote
      allow delete: if isAdmin();
    }
  }
}
